From 20f62e2b0c8137873fa04bfa2fabf132f93be7e0 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Wed, 22 Feb 2023 16:39:25 +0800
Subject: [PATCH 02/11] va: Add a helper function to detect the surface
 modifier.

We currently use the way of creating and exporting the surface
to detect its underlying modifier. The new libva may import more
effective way to do that later.
---
 .../gst-libs/gst/va/gstvaallocator.c          | 136 +++++++++++++-----
 .../gst-libs/gst/va/gstvaallocator.h          |   5 +
 2 files changed, 102 insertions(+), 39 deletions(-)

diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.c b/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.c
index 3600b1771a..044ff8860c 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.c
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.c
@@ -40,6 +40,7 @@
 #ifndef G_OS_WIN32
 #include <sys/types.h>
 #include <unistd.h>
+#include <libdrm/drm_fourcc.h>
 #endif
 
 #include "gstvasurfacecopy.h"
@@ -542,45 +543,34 @@ gst_va_dmabuf_memory_release (GstMiniObject * mini_object)
   return FALSE;
 }
 
-/* Creates an exported VASurfaceID and adds it as @buffer's memories
- * qdata
- *
- * If @info is not NULL, a dummy (non-pooled) buffer is created to
- * update offsets and strides, and it has to be unrefed immediately.
- */
 static gboolean
-gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
-    GstBuffer * buffer, GstVideoInfo * info)
+_va_dmabuf_create_and_export_surface (GstVaDisplay * display,
+    guint usage_hint, guint64 modifier, GstVideoInfo * info,
+    VASurfaceID * ret_surface, VADRMPRIMESurfaceDescriptor * ret_desc)
 {
-  GstVaBufferSurface *buf;
-  GstVaDmabufAllocator *self = GST_VA_DMABUF_ALLOCATOR (allocator);
-  GstVideoFormat format;
   VADRMPRIMESurfaceDescriptor desc = { 0, };
+  guint32 fourcc, rt_format, export_flags;
   VASurfaceAttribExternalBuffers *extbuf = NULL, ext_buf;
+  GstVideoFormat format;
   VASurfaceID surface;
-  guint32 i, fourcc, rt_format, export_flags;
-  GDestroyNotify buffer_destroy = NULL;
-  gsize object_offset[4];
 
-  g_return_val_if_fail (GST_IS_VA_DMABUF_ALLOCATOR (allocator), FALSE);
+  _init_debug_category ();
+
+  format = GST_VIDEO_INFO_FORMAT (info);
 
-  format = GST_VIDEO_INFO_FORMAT (&self->info);
   fourcc = gst_va_fourcc_from_video_format (format);
   rt_format = gst_va_chroma_from_video_format (format);
-  if (fourcc == 0 || rt_format == 0) {
-    GST_ERROR_OBJECT (allocator, "Unsupported format: %s",
-        gst_video_format_to_string (GST_VIDEO_INFO_FORMAT (&self->info)));
+  if (fourcc == 0 || rt_format == 0)
     return FALSE;
-  }
 
   /* HACK(victor): disable tiling for i965 driver for RGB formats */
-  if (GST_VA_DISPLAY_IS_IMPLEMENTATION (self->display, INTEL_I965)
-      && GST_VIDEO_INFO_IS_RGB (&self->info)) {
+  if (GST_VA_DISPLAY_IS_IMPLEMENTATION (display, INTEL_I965)
+      && GST_VIDEO_INFO_IS_RGB (info)) {
     /* *INDENT-OFF* */
     ext_buf = (VASurfaceAttribExternalBuffers) {
-      .width = GST_VIDEO_INFO_WIDTH (&self->info),
-      .height = GST_VIDEO_INFO_HEIGHT (&self->info),
-      .num_planes = GST_VIDEO_INFO_N_PLANES (&self->info),
+      .width = GST_VIDEO_INFO_WIDTH (info),
+      .height = GST_VIDEO_INFO_HEIGHT (info),
+      .num_planes = GST_VIDEO_INFO_N_PLANES (info),
       .pixel_format = fourcc,
     };
     /* *INDENT-ON* */
@@ -588,14 +578,13 @@ gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
     extbuf = &ext_buf;
   }
 
-  if (!va_create_surfaces (self->display, rt_format, fourcc,
-          GST_VIDEO_INFO_WIDTH (&self->info),
-          GST_VIDEO_INFO_HEIGHT (&self->info), self->usage_hint, extbuf,
-          &surface, 1))
+  if (!va_create_surfaces_with_modifier (display, rt_format, fourcc,
+          GST_VIDEO_INFO_WIDTH (info), GST_VIDEO_INFO_HEIGHT (info),
+          usage_hint, modifier, extbuf, &surface, 1))
     return FALSE;
 
   /* workaround for missing layered dmabuf formats in i965 */
-  if (GST_VA_DISPLAY_IS_IMPLEMENTATION (self->display, INTEL_I965)
+  if (GST_VA_DISPLAY_IS_IMPLEMENTATION (display, INTEL_I965)
       && (fourcc == VA_FOURCC_YUY2 || fourcc == VA_FOURCC_UYVY)) {
     /* These are not representable as separate planes */
     export_flags = VA_EXPORT_SURFACE_COMPOSED_LAYERS;
@@ -607,11 +596,11 @@ gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
 
   export_flags |= VA_EXPORT_SURFACE_READ_WRITE;
 
-  if (!va_export_surface_to_dmabuf (self->display, surface, export_flags,
-          &desc))
+  if (!va_export_surface_to_dmabuf (display, surface, export_flags, &desc))
     goto failed;
 
-  g_assert (GST_VIDEO_INFO_N_PLANES (&self->info) == desc.num_layers);
+  if (GST_VIDEO_INFO_N_PLANES (info) != desc.num_layers)
+    goto failed;
 
   if (fourcc != desc.fourcc) {
     GST_ERROR ("Unsupported fourcc: %" GST_FOURCC_FORMAT,
@@ -624,6 +613,81 @@ gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
     goto failed;
   }
 
+  *ret_surface = surface;
+
+  if (ret_desc)
+    *ret_desc = desc;
+
+  return TRUE;
+
+failed:
+  {
+    va_destroy_surfaces (display, &surface, 1);
+    return FALSE;
+  }
+}
+
+guint64
+gst_va_dmabuf_get_modifier_for_format (GstVaDisplay * display,
+    GstVideoFormat format, guint usage_hint)
+{
+  VADRMPRIMESurfaceDescriptor desc = { 0, };
+  VASurfaceID surface;
+  guint64 modifier = DRM_FORMAT_MOD_INVALID;
+  GstVideoInfo info;
+  guint32 i;
+
+  gst_video_info_init (&info);
+  gst_video_info_set_format (&info, format, 64, 64);
+
+  if (!_va_dmabuf_create_and_export_surface (display, usage_hint,
+          DRM_FORMAT_MOD_INVALID, &info, &surface, &desc))
+    return DRM_FORMAT_MOD_INVALID;
+
+  for (i = 0; i < desc.num_objects; i++) {
+    if (modifier != DRM_FORMAT_MOD_INVALID
+        && modifier != desc.objects[i].drm_format_modifier) {
+      GST_ERROR ("Different objects have different modifier");
+      goto failed;
+    }
+    modifier = desc.objects[i].drm_format_modifier;
+  }
+
+  va_destroy_surfaces (display, &surface, 1);
+  return modifier;
+
+failed:
+  {
+    va_destroy_surfaces (display, &surface, 1);
+    return DRM_FORMAT_MOD_INVALID;
+  }
+}
+
+/* Creates an exported VASurfaceID and adds it as @buffer's memories
+ * qdata
+ *
+ * If @info is not NULL, a dummy (non-pooled) buffer is created to
+ * update offsets and strides, and it has to be unrefed immediately.
+ */
+static gboolean
+gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
+    GstBuffer * buffer, GstVideoInfo * info)
+{
+  GstVaBufferSurface *buf;
+  GstVaDmabufAllocator *self = GST_VA_DMABUF_ALLOCATOR (allocator);
+  GstVideoFormat format;
+  VADRMPRIMESurfaceDescriptor desc = { 0, };
+  VASurfaceID surface;
+  guint32 i;
+  GDestroyNotify buffer_destroy = NULL;
+  gsize object_offset[4];
+
+  g_return_val_if_fail (GST_IS_VA_DMABUF_ALLOCATOR (allocator), FALSE);
+
+  if (!_va_dmabuf_create_and_export_surface (self->display, self->usage_hint,
+          DRM_FORMAT_MOD_INVALID, &self->info, &surface, &desc))
+    return FALSE;
+
   buf = gst_va_buffer_surface_new (surface, format, desc.width, desc.height);
   if (G_UNLIKELY (info)) {
     *info = self->info;
@@ -693,12 +757,6 @@ gst_va_dmabuf_allocator_setup_buffer_full (GstAllocator * allocator,
   }
 
   return TRUE;
-
-failed:
-  {
-    va_destroy_surfaces (self->display, &surface, 1);
-    return FALSE;
-  }
 }
 
 /**
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.h b/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.h
index f0ee50a773..cf1bcfc8a4 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.h
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/va/gstvaallocator.h
@@ -65,6 +65,11 @@ gboolean              gst_va_dmabuf_memories_setup        (GstVaDisplay * displa
                                                            gsize offset[GST_VIDEO_MAX_PLANES],
                                                            guint usage_hint);
 
+GST_VA_API
+guint64               gst_va_dmabuf_get_modifier_for_format (GstVaDisplay * display,
+                                                             GstVideoFormat format,
+                                                             guint usage_hint);
+
 #define GST_TYPE_VA_ALLOCATOR (gst_va_allocator_get_type())
 #define GST_VA_ALLOCATOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_VA_ALLOCATOR, GstVaAllocator))
 #define GST_VA_ALLOCATOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass), GST_TYPE_VA_ALLOCATOR, GstVaAllocatorClass))
-- 
2.25.1

