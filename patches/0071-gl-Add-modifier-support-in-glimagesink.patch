From 4145d8c47f043aa43af16f87f0082b3b23badbb8 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Sat, 10 Dec 2022 21:40:37 +0800
Subject: [PATCH 11/11] gl: Add modifier support in glimagesink.

---
 .../gst-libs/gst/gl/gstglupload.c             | 514 +++++++++++++++---
 1 file changed, 444 insertions(+), 70 deletions(-)

diff --git a/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c b/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
index 39d88bf4bf..ef398d5dca 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
+++ b/subprojects/gst-plugins-base/gst-libs/gst/gl/gstglupload.c
@@ -38,6 +38,8 @@
 
 #if GST_GL_HAVE_DMABUF
 #include <gst/allocators/gstdmabuf.h>
+#include <gst/video/video-info-dma.h>
+#include <libdrm/drm_fourcc.h>
 #endif
 
 #if GST_GL_HAVE_VIV_DIRECTVIV
@@ -91,7 +93,11 @@ typedef struct _UploadMethod UploadMethod;
 
 struct _GstGLUploadPrivate
 {
-  GstVideoInfo in_info;
+  union
+  {
+    GstVideoInfo in_info;
+    GstVideoInfoDmaDrm in_info_drm;
+  };
   GstVideoInfo out_info;
   GstCaps *in_caps;
   GstCaps *out_caps;
@@ -116,23 +122,44 @@ struct _GstGLUploadPrivate
 G_DEFINE_TYPE_WITH_CODE (GstGLUpload, gst_gl_upload, GST_TYPE_OBJECT,
     G_ADD_PRIVATE (GstGLUpload) DEBUG_INIT);
 
+static void
+_convert_dma_format_in_structure (GstGLContext * context,
+    GstStructure * s, gboolean to_dma);
+
 static GstCaps *
-_set_caps_features_with_passthrough (const GstCaps * caps,
-    const gchar * feature_name, GstCapsFeatures * passthrough)
+_set_caps_features_with_passthrough (GstGLContext * context,
+    const GstCaps * caps, const gchar * feature_name,
+    GstCapsFeatures * passthrough)
 {
   guint i, j, m, n;
   GstCaps *tmp;
 
+  g_assert (!gst_caps_features_contains (passthrough,
+          GST_CAPS_FEATURE_MEMORY_DMABUF));
+
   tmp = gst_caps_new_empty ();
 
   n = gst_caps_get_size (caps);
   for (i = 0; i < n; i++) {
     GstCapsFeatures *features, *orig_features;
-    GstStructure *s = gst_caps_get_structure (caps, i);
+    GstStructure *s = gst_structure_copy (gst_caps_get_structure (caps, i));
 
     orig_features = gst_caps_get_features (caps, i);
     features = gst_caps_features_new (feature_name, NULL);
 
+    if ((gst_caps_features_is_any (orig_features) ||
+            !gst_caps_features_contains (orig_features,
+                GST_CAPS_FEATURE_MEMORY_DMABUF)) &&
+        gst_caps_features_contains (features, GST_CAPS_FEATURE_MEMORY_DMABUF)) {
+      _convert_dma_format_in_structure (context, s, TRUE);
+    } else if (gst_caps_features_contains (orig_features,
+            GST_CAPS_FEATURE_MEMORY_DMABUF) &&
+        (gst_caps_features_is_any (features) ||
+            !gst_caps_features_contains (features,
+                GST_CAPS_FEATURE_MEMORY_DMABUF))) {
+      _convert_dma_format_in_structure (context, s, FALSE);
+    }
+
     if (gst_caps_features_is_any (orig_features)) {
       /* if we have any features, we add both the features with and without @passthrough */
       gst_caps_append_structure_full (tmp, gst_structure_copy (s),
@@ -166,7 +193,7 @@ _set_caps_features_with_passthrough (const GstCaps * caps,
       }
     }
 
-    gst_caps_append_structure_full (tmp, gst_structure_copy (s), features);
+    gst_caps_append_structure_full (tmp, s, features);
   }
 
   return tmp;
@@ -244,7 +271,7 @@ _gl_memory_upload_transform_caps (gpointer impl, GstGLContext * context,
   GstCaps *ret;
 
   ret =
-      _set_caps_features_with_passthrough (caps,
+      _set_caps_features_with_passthrough (context, caps,
       GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
   gst_caps_features_free (passthrough);
@@ -367,41 +394,42 @@ _gl_memory_upload_propose_allocation (gpointer impl, GstQuery * decide_query,
     }
   }
 
-  if (!pool) {
-    GstStructure *config;
-    GstVideoInfo info;
-    gsize size;
-
-
-    if (!gst_video_info_from_caps (&info, caps))
-      goto invalid_caps;
-
-    pool = gst_gl_buffer_pool_new (upload->upload->context);
-    config = gst_buffer_pool_get_config (pool);
-
-    /* the normal size of a frame */
-    size = info.size;
-    gst_buffer_pool_config_set_params (config, caps, size, 0, 0);
-    gst_buffer_pool_config_add_option (config,
-        GST_BUFFER_POOL_OPTION_GL_SYNC_META);
-    if (upload->upload->priv->out_caps) {
-      GstGLTextureTarget target;
-      const gchar *target_pool_option_str;
+  if (gst_caps_features_contains (features, GST_CAPS_FEATURE_MEMORY_GL_MEMORY)) {
+    if (!pool) {
+      GstStructure *config;
+      GstVideoInfo info;
+      gsize size;
+
+      if (!gst_video_info_from_caps (&info, caps))
+        goto invalid_caps;
+
+      pool = gst_gl_buffer_pool_new (upload->upload->context);
+      config = gst_buffer_pool_get_config (pool);
+
+      /* the normal size of a frame */
+      size = info.size;
+      gst_buffer_pool_config_set_params (config, caps, size, 0, 0);
+      gst_buffer_pool_config_add_option (config,
+          GST_BUFFER_POOL_OPTION_GL_SYNC_META);
+      if (upload->upload->priv->out_caps) {
+        GstGLTextureTarget target;
+        const gchar *target_pool_option_str;
+
+        target =
+            _caps_get_texture_target (upload->upload->priv->out_caps,
+            GST_GL_TEXTURE_TARGET_2D);
+        target_pool_option_str =
+            gst_gl_texture_target_to_buffer_pool_option (target);
+        gst_buffer_pool_config_add_option (config, target_pool_option_str);
+      }
 
-      target =
-          _caps_get_texture_target (upload->upload->priv->out_caps,
-          GST_GL_TEXTURE_TARGET_2D);
-      target_pool_option_str =
-          gst_gl_texture_target_to_buffer_pool_option (target);
-      gst_buffer_pool_config_add_option (config, target_pool_option_str);
-    }
+      if (!gst_buffer_pool_set_config (pool, config)) {
+        gst_object_unref (pool);
+        goto config_failed;
+      }
 
-    if (!gst_buffer_pool_set_config (pool, config)) {
-      gst_object_unref (pool);
-      goto config_failed;
+      gst_query_add_allocation_pool (query, pool, size, 1, 0);
     }
-
-    gst_query_add_allocation_pool (query, pool, size, 1, 0);
   }
 
   if (pool)
@@ -501,6 +529,8 @@ typedef struct _GstEGLImageCache
 struct DmabufUpload
 {
   GstGLUpload *upload;
+  /* May have different info with in_info. */
+  GstVideoInfo in_info_dma;
 
   GstEGLImage *eglimage[GST_VIDEO_MAX_PLANES];
   GstEGLImageCache *eglimage_cache;
@@ -513,6 +543,7 @@ struct DmabufUpload
   GstGLTextureTarget target;
   GstVideoInfo out_info;
   /* only used for pointer comparison */
+  gpointer in_caps;
   gpointer out_caps;
 };
 
@@ -621,10 +652,14 @@ gst_egl_image_cache_new (void)
   return cache;
 }
 
+#define DMABUF_CAPS                                             \
+    "video/x-raw(" GST_CAPS_FEATURE_MEMORY_DMABUF "), "         \
+    "width = " GST_VIDEO_SIZE_RANGE ", "                        \
+    "height = " GST_VIDEO_SIZE_RANGE ", "                       \
+    "framerate = " GST_VIDEO_FPS_RANGE
+
 static GstStaticCaps _dma_buf_upload_caps =
-    GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE_WITH_FEATURES
-    (GST_CAPS_FEATURE_MEMORY_DMABUF,
-        GST_GL_MEMORY_VIDEO_FORMATS_STR) ";"
+    GST_STATIC_CAPS (DMABUF_CAPS ";"
     GST_VIDEO_CAPS_MAKE (GST_GL_MEMORY_VIDEO_FORMATS_STR));
 
 static gpointer
@@ -634,9 +669,293 @@ _dma_buf_upload_new (GstGLUpload * upload)
   dmabuf->upload = upload;
   dmabuf->eglimage_cache = gst_egl_image_cache_new ();
   dmabuf->target = GST_GL_TEXTURE_TARGET_2D;
+  dmabuf->in_caps = NULL;
+  dmabuf->out_caps = NULL;
   return dmabuf;
 }
 
+/* Return an array of drm format string. */
+static GPtrArray *
+_dma_buf_get_drm_formats_by_video_format (GstGLContext * context,
+    GstVideoFormat video_format)
+{
+  GPtrArray *drm_formats = NULL;
+  GArray *modifiers = NULL;
+  gint32 fourcc;
+
+  drm_formats = g_ptr_array_new ();
+  g_ptr_array_set_free_func (drm_formats, (GDestroyNotify) g_free);
+
+  fourcc = gst_video_dma_drm_fourcc_from_format (video_format);
+  if (fourcc == DRM_FORMAT_INVALID)
+    goto error;
+
+  modifiers = gst_egl_image_get_modifiers (context, fourcc);
+  if (modifiers == NULL) {
+    /* Just suppose only linear support */
+    g_ptr_array_add (drm_formats,
+        gst_video_dma_drm_fourcc_to_string (fourcc, 0));
+  } else {
+    guint i;
+
+    for (i = 0; i < modifiers->len; i++)
+      g_ptr_array_add (drm_formats, gst_video_dma_drm_fourcc_to_string (fourcc,
+              g_array_index (modifiers, guint64, i)));
+  }
+
+  if (modifiers)
+    g_array_unref (modifiers);
+
+  g_assert (drm_formats->len > 0);
+  return drm_formats;
+
+error:
+  if (drm_formats)
+    g_ptr_array_unref (drm_formats);
+  if (modifiers)
+    g_array_unref (modifiers);
+  return NULL;
+}
+
+static gboolean
+_dma_buf_caps_add_drm_field (GstGLContext * context, GstStructure * structure)
+{
+  const GValue *formats;
+  GValue drm_formats_val = G_VALUE_INIT;
+  GPtrArray *all_drm_formats = NULL;
+  GstVideoFormat fmt;
+  guint i, j;
+  gboolean ret = TRUE;
+
+  formats = gst_structure_get_value (structure, "format");
+  if (formats == NULL) {
+    ret = FALSE;
+    goto out;
+  }
+
+  if (G_VALUE_HOLDS_STRING (formats)) {
+    fmt = gst_video_format_from_string (g_value_get_string (formats));
+    if (fmt == GST_VIDEO_FORMAT_UNKNOWN) {
+      ret = FALSE;
+      goto out;
+    }
+
+    all_drm_formats = _dma_buf_get_drm_formats_by_video_format (context, fmt);
+    if (!all_drm_formats) {
+      ret = FALSE;
+      goto out;
+    }
+  } else if (GST_VALUE_HOLDS_LIST (formats)) {
+    GPtrArray *drm_formats;
+    GValue *format_val;
+    guint num_values;
+
+    num_values = gst_value_list_get_size (formats);
+    for (i = 0; i < num_values; i++) {
+      format_val = (GValue *) gst_value_list_get_value (formats, i);
+      if (!format_val)
+        continue;
+
+      fmt = gst_video_format_from_string (g_value_get_string (format_val));
+      if (fmt == GST_VIDEO_FORMAT_UNKNOWN)
+        continue;
+
+      drm_formats = _dma_buf_get_drm_formats_by_video_format (context, fmt);
+      if (!drm_formats)
+        continue;
+
+      if (!all_drm_formats) {
+        all_drm_formats = drm_formats;
+        continue;
+      }
+
+      for (j = 0; j < drm_formats->len; j++)
+        g_ptr_array_add (all_drm_formats, g_ptr_array_index (drm_formats, j));
+
+      g_ptr_array_set_free_func (drm_formats, NULL);
+      g_ptr_array_unref (drm_formats);
+    }
+
+    if (!all_drm_formats || all_drm_formats->len == 0) {
+      ret = FALSE;
+      goto out;
+    }
+  }
+
+  g_assert (all_drm_formats && all_drm_formats->len > 0);
+
+  if (all_drm_formats->len == 1) {
+    g_value_init (&drm_formats_val, G_TYPE_STRING);
+    g_value_set_string (&drm_formats_val,
+        g_ptr_array_index (all_drm_formats, 0));
+  } else {
+    GValue item = G_VALUE_INIT;
+
+    gst_value_list_init (&drm_formats_val, all_drm_formats->len);
+
+    for (i = 0; i < all_drm_formats->len; i++) {
+      g_value_init (&item, G_TYPE_STRING);
+      g_value_set_string (&item, g_ptr_array_index (all_drm_formats, i));
+      gst_value_list_append_value (&drm_formats_val, &item);
+      g_value_unset (&item);
+    }
+  }
+
+  gst_structure_set_value (structure, "drm-format", &drm_formats_val);
+  gst_structure_remove_field (structure, "format");
+
+out:
+  g_value_unset (&drm_formats_val);
+  if (all_drm_formats)
+    g_ptr_array_unref (all_drm_formats);
+  return ret;
+}
+
+static gboolean
+_dma_buf_caps_remove_drm_field (GstStructure * structure)
+{
+  const GValue *drm_formats;
+  GValue formats_val = G_VALUE_INIT;
+  GArray *all_formats = NULL;
+  GstVideoFormat fmt;
+  guint32 fourcc;
+  guint i, j;
+  gboolean ret = TRUE;
+
+  all_formats = g_array_new (FALSE, FALSE, sizeof (GstVideoFormat));
+
+  drm_formats = gst_structure_get_value (structure, "drm-format");
+  /* It is allown to have no drm-format, just make sure that both
+     the drm-format and format fields are unset. */
+  if (drm_formats == NULL) {
+    gst_structure_remove_field (structure, "format");
+    goto out;
+  }
+
+  if (G_VALUE_HOLDS_STRING (drm_formats)) {
+    fourcc = gst_video_dma_drm_fourcc_from_string
+        (g_value_get_string (drm_formats), NULL);
+    if (fourcc == DRM_FORMAT_INVALID) {
+      ret = FALSE;
+      goto out;
+    }
+
+    fmt = gst_video_dma_drm_fourcc_to_format (fourcc);
+    if (fmt == GST_VIDEO_FORMAT_UNKNOWN) {
+      ret = FALSE;
+      goto out;
+    }
+
+    g_array_append_val (all_formats, fmt);
+  } else if (GST_VALUE_HOLDS_LIST (drm_formats)) {
+    GValue *drm_format_val;
+    guint num_values;
+
+    num_values = gst_value_list_get_size (drm_formats);
+    for (i = 0; i < num_values; i++) {
+      drm_format_val = (GValue *) gst_value_list_get_value (drm_formats, i);
+      if (!drm_format_val)
+        continue;
+
+      fourcc = gst_video_dma_drm_fourcc_from_string
+          (g_value_get_string (drm_format_val), NULL);
+      if (fourcc == DRM_FORMAT_INVALID)
+        continue;
+
+      fmt = gst_video_dma_drm_fourcc_to_format (fourcc);
+      if (fmt == GST_VIDEO_FORMAT_UNKNOWN)
+        continue;
+
+      for (j = 0; j < all_formats->len; j++) {
+        if (g_array_index (all_formats, GstVideoFormat, j) == fmt)
+          break;
+      }
+
+      if (j == all_formats->len)
+        g_array_append_val (all_formats, fmt);
+    }
+
+    if (!all_formats || all_formats->len == 0) {
+      ret = FALSE;
+      goto out;
+    }
+  }
+
+  g_assert (all_formats && all_formats->len > 0);
+
+  if (all_formats->len == 1) {
+    fmt = g_array_index (all_formats, GstVideoFormat, 0);
+
+    g_value_init (&formats_val, G_TYPE_STRING);
+    g_value_set_string (&formats_val, gst_video_format_to_string (fmt));
+  } else {
+    GValue item = G_VALUE_INIT;
+
+    gst_value_list_init (&formats_val, all_formats->len);
+
+    for (i = 0; i < all_formats->len; i++) {
+      fmt = g_array_index (all_formats, GstVideoFormat, i);
+
+      g_value_init (&item, G_TYPE_STRING);
+      g_value_set_string (&item, gst_video_format_to_string (fmt));
+      gst_value_list_append_value (&formats_val, &item);
+      g_value_unset (&item);
+    }
+  }
+
+  gst_structure_set_value (structure, "format", &formats_val);
+  gst_structure_remove_field (structure, "drm-format");
+
+out:
+  g_value_unset (&formats_val);
+  if (all_formats)
+    g_array_unref (all_formats);
+  return ret;
+}
+
+static void
+_convert_dma_format_in_structure (GstGLContext * context,
+    GstStructure * structure, gboolean to_dma)
+{
+  if (to_dma) {
+    if (!context || !gst_gl_display_egl_from_gl_display (context->display)) {
+      /* No context available, we can not know the real modifiers.
+         Just leaving all format related fields blank. */
+      gst_structure_remove_field (structure, "format");
+      gst_structure_remove_field (structure, "drm-format");
+
+      return;
+    }
+
+    /* When the caps we are converting does not have format info,
+       the converted result will not have drm-format info.
+       But the DMA caps in template does not contain any drm-format
+       info, and when transforming or query caps, it can not clip
+       the right drm-format field for us. So we need to add all
+       possible formats here. */
+    if (!gst_structure_get_value (structure, "format")) {
+      GValue formats = G_VALUE_INIT;
+      gchar *format_str = g_strdup (GST_GL_MEMORY_VIDEO_FORMATS_STR);
+
+      g_value_init (&formats, GST_TYPE_LIST);
+      gst_value_deserialize (&formats, format_str);
+      gst_structure_set_value (structure, "format", &formats);
+      g_free (format_str);
+      g_value_unset (&formats);
+    }
+
+    if (!_dma_buf_caps_add_drm_field (context, structure)) {
+      gst_structure_remove_field (structure, "format");
+      gst_structure_remove_field (structure, "drm-format");
+    }
+  } else {
+    if (!_dma_buf_caps_remove_drm_field (structure)) {
+      gst_structure_remove_field (structure, "format");
+      gst_structure_remove_field (structure, "drm-format");
+    }
+  }
+}
+
 static GstCaps *
 _dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstPadDirection direction, GstCaps * caps)
@@ -665,8 +984,7 @@ _dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
   if (direction == GST_PAD_SINK) {
     GstCaps *tmp;
 
-    ret =
-        _set_caps_features_with_passthrough (caps,
+    ret = _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     tmp = _caps_intersect_texture_target (ret, 1 << GST_GL_TEXTURE_TARGET_2D);
@@ -675,8 +993,7 @@ _dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
   } else {
     gint i, n;
 
-    ret =
-        _set_caps_features_with_passthrough (caps,
+    ret = _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_DMABUF, passthrough);
 
     n = gst_caps_get_size (ret);
@@ -700,9 +1017,10 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
     GstCaps * out_caps)
 {
   struct DmabufUpload *dmabuf = impl;
-  GstVideoInfo *in_info = &dmabuf->upload->priv->in_info;
+  GstVideoInfo *in_info = &dmabuf->in_info_dma;
+  GstVideoInfoDmaDrm *in_info_drm = &dmabuf->upload->priv->in_info_drm;
   GstVideoInfo *out_info = &dmabuf->out_info;
-  guint n_planes = GST_VIDEO_INFO_N_PLANES (in_info);
+  guint n_planes;
   GstVideoMeta *meta;
   guint n_mem;
   GstMemory *mems[GST_VIDEO_MAX_PLANES];
@@ -712,6 +1030,32 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
   gint fd[GST_VIDEO_MAX_PLANES];
   guint i;
 
+  /* Recognize the real format for the first time. */
+  if (in_caps != dmabuf->in_caps) {
+    g_assert (GST_VIDEO_INFO_FORMAT (&dmabuf->upload->priv->in_info)
+        != GST_VIDEO_FORMAT_UNKNOWN);
+
+    /* Linear or recognized format, just use it */
+    if (GST_VIDEO_INFO_FORMAT (&dmabuf->upload->priv->in_info)
+        != GST_VIDEO_FORMAT_ENCODED) {
+      *in_info = dmabuf->upload->priv->in_info;
+    } else {
+      GstVideoFormat fmt;
+
+      fmt = gst_video_dma_drm_fourcc_to_format (in_info_drm->drm_fourcc);
+      if (fmt == GST_VIDEO_FORMAT_UNKNOWN)
+        return FALSE;
+
+      if (!gst_video_info_set_format (in_info, fmt,
+              GST_VIDEO_INFO_WIDTH (in_info), GST_VIDEO_INFO_HEIGHT (in_info)))
+        return FALSE;
+    }
+
+    dmabuf->in_caps = in_caps;
+  }
+
+  n_planes = GST_VIDEO_INFO_N_PLANES (in_info);
+
   n_mem = gst_buffer_n_memory (buffer);
   meta = gst_buffer_get_video_meta (buffer);
 
@@ -850,11 +1194,13 @@ _dma_buf_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
     /* otherwise create one and cache it */
     if (dmabuf->direct)
       dmabuf->eglimage[i] =
-          gst_egl_image_from_dmabuf_direct_target (dmabuf->upload->context, fd,
-          offset, in_info, dmabuf->target);
+          gst_egl_image_from_dmabuf_direct_target_with_modifier
+          (dmabuf->upload->context, fd, offset, in_info,
+          dmabuf->target, in_info_drm->drm_modifier);
     else
-      dmabuf->eglimage[i] = gst_egl_image_from_dmabuf (dmabuf->upload->context,
-          fd[i], in_info, i, offset[i]);
+      dmabuf->eglimage[i] =
+          gst_egl_image_from_dmabuf_with_modifier (dmabuf->upload->context,
+          fd[i], in_info, i, offset[i], in_info_drm->drm_modifier);
 
     if (!dmabuf->eglimage[i]) {
       GST_DEBUG_OBJECT (dmabuf->upload, "could not create eglimage");
@@ -903,7 +1249,7 @@ _dma_buf_upload_perform (gpointer impl, GstBuffer * buffer, GstBuffer ** outbuf)
    * to reconfigure.
    */
   if (!dmabuf->direct &&
-      GST_VIDEO_INFO_FORMAT (&dmabuf->upload->priv->in_info) !=
+      GST_VIDEO_INFO_FORMAT (&dmabuf->in_info_dma) !=
       GST_VIDEO_INFO_FORMAT (&dmabuf->out_info))
     return GST_GL_UPLOAD_RECONFIGURE;
 
@@ -989,7 +1335,7 @@ _direct_dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstGLTextureTarget target_mask;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     gst_caps_set_simple (ret, "format", G_TYPE_STRING, "RGBA", NULL);
@@ -1008,22 +1354,25 @@ _direct_dma_buf_upload_transform_caps (gpointer impl, GstGLContext * context,
     ret = tmp;
   } else {
     gint i, n;
-    GstCaps *tmp;
+    GstCaps *tmp0, *tmp1;
     GValue formats = G_VALUE_INIT;
     gchar *format_str = g_strdup (GST_GL_MEMORY_VIDEO_FORMATS_STR);
 
-    ret =
-        _set_caps_features_with_passthrough (caps,
-        GST_CAPS_FEATURE_MEMORY_DMABUF, passthrough);
-
     g_value_init (&formats, GST_TYPE_LIST);
     gst_value_deserialize (&formats, format_str);
-    tmp = gst_caps_copy (ret);
-    gst_caps_set_value (tmp, "format", &formats);
-    gst_caps_append (ret, tmp);
+    tmp0 = gst_caps_copy (caps);
+    tmp1 = gst_caps_copy (caps);
+    gst_caps_set_value (tmp1, "format", &formats);
+    gst_caps_append (tmp0, tmp1);
     g_free (format_str);
     g_value_unset (&formats);
 
+    ret =
+        _set_caps_features_with_passthrough (context, tmp0,
+        GST_CAPS_FEATURE_MEMORY_DMABUF, passthrough);
+
+    gst_caps_unref (tmp0);
+
     n = gst_caps_get_size (ret);
     for (i = 0; i < n; i++) {
       GstStructure *s = gst_caps_get_structure (ret, i);
@@ -1074,6 +1423,21 @@ static const UploadMethod _direct_dma_buf_external_upload = {
   &_dma_buf_upload_free
 };
 
+#else /* GST_GL_HAVE_DMABUF */
+
+static void
+_convert_dma_format_in_structure (GstGLContext * context,
+    GstStructure * structure, gboolean to_dma)
+{
+  if (to_dma) {
+    /* No DMA support, Just leaving all format related fields blank. */
+    gst_structure_remove_field (structure, "format");
+    gst_structure_remove_field (structure, "drm-format");
+  } else {
+    gst_structure_remove_field (structure, "drm-format");
+  }
+}
+
 #endif /* GST_GL_HAVE_DMABUF */
 
 struct GLUploadMeta
@@ -1110,7 +1474,7 @@ _upload_meta_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstCaps *tmp;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     tmp = _caps_intersect_texture_target (ret, 1 << GST_GL_TEXTURE_TARGET_2D);
@@ -1120,7 +1484,7 @@ _upload_meta_upload_transform_caps (gpointer impl, GstGLContext * context,
     gint i, n;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_META_GST_VIDEO_GL_TEXTURE_UPLOAD_META, passthrough);
     gst_caps_set_simple (ret, "format", G_TYPE_STRING, "RGBA", NULL);
 
@@ -1406,7 +1770,7 @@ _raw_data_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstCaps *tmp;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     target_mask |= 1 << GST_GL_TEXTURE_TARGET_2D;
@@ -1418,7 +1782,7 @@ _raw_data_upload_transform_caps (gpointer impl, GstGLContext * context,
     gint i, n;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY, passthrough);
 
     n = gst_caps_get_size (ret);
@@ -1445,6 +1809,11 @@ _raw_data_upload_accept (gpointer impl, GstBuffer * buffer, GstCaps * in_caps,
   if (!gst_caps_features_contains (features, GST_CAPS_FEATURE_MEMORY_GL_MEMORY))
     return FALSE;
 
+  /* Not a linear or recognized format, we can not map it directly. */
+  if (GST_VIDEO_INFO_FORMAT (&raw->upload->priv->in_info)
+      == GST_VIDEO_FORMAT_ENCODED)
+    return FALSE;
+
   if (raw->in_frame)
     _raw_upload_frame_unref (raw->in_frame);
   raw->in_frame = _raw_upload_frame_new (raw, buffer);
@@ -1593,7 +1962,7 @@ _directviv_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstCaps *tmp;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     gst_caps_set_simple (ret, "format", G_TYPE_STRING, "RGBA", NULL);
@@ -1906,7 +2275,7 @@ _nvmm_upload_transform_caps (gpointer impl, GstGLContext * context,
     GstCaps *tmp;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_GL_MEMORY, passthrough);
 
     tmp =
@@ -1918,7 +2287,7 @@ _nvmm_upload_transform_caps (gpointer impl, GstGLContext * context,
     gint i, n;
 
     ret =
-        _set_caps_features_with_passthrough (caps,
+        _set_caps_features_with_passthrough (context, caps,
         GST_CAPS_FEATURE_MEMORY_NVMM, passthrough);
 
     n = gst_caps_get_size (ret);
@@ -2471,7 +2840,7 @@ gst_gl_upload_transform_caps (GstGLUpload * upload, GstGLContext * context,
         GstCapsFeatures *passthrough =
             gst_caps_features_from_string
             (GST_CAPS_FEATURE_META_GST_VIDEO_OVERLAY_COMPOSITION);
-        GstCaps *raw_tmp = _set_caps_features_with_passthrough (tmp,
+        GstCaps *raw_tmp = _set_caps_features_with_passthrough (context, tmp,
             GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY, passthrough);
         gst_caps_append (tmp, raw_tmp);
         gst_caps_features_free (passthrough);
@@ -2548,7 +2917,12 @@ _gst_gl_upload_set_caps_unlocked (GstGLUpload * upload, GstCaps * in_caps,
   gst_caps_replace (&upload->priv->in_caps, in_caps);
   gst_caps_replace (&upload->priv->out_caps, out_caps);
 
-  gst_video_info_from_caps (&upload->priv->in_info, in_caps);
+  if (gst_video_is_dma_drm_caps (in_caps)) {
+    if (!gst_video_info_dma_drm_from_caps (&upload->priv->in_info_drm, in_caps))
+      return FALSE;
+  } else {
+    gst_video_info_from_caps (&upload->priv->in_info, in_caps);
+  }
   gst_video_info_from_caps (&upload->priv->out_info, out_caps);
 
   upload->priv->method = NULL;
-- 
2.25.1

