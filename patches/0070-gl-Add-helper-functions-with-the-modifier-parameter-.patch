From 85f21ebc9fcc6a4b675a8eb53829773b11520ed0 Mon Sep 17 00:00:00 2001
From: Yinhang Liu <yinhang.liu@intel.com>
Date: Wed, 22 Feb 2023 21:53:28 +0800
Subject: [PATCH 10/11] gl: Add helper functions with the modifier parameter to
 egl image.

---
 .../gst-libs/gst/gl/egl/gsteglimage.c         | 139 +++++++++++++++++-
 .../gst-libs/gst/gl/egl/gsteglimage.h         |  18 ++-
 2 files changed, 148 insertions(+), 9 deletions(-)

diff --git a/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.c b/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.c
index 179abe9762..427e8914e9 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.c
+++ b/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.c
@@ -644,10 +644,35 @@ get_egl_stride (const GstVideoInfo * info, gint plane)
 GstEGLImage *
 gst_egl_image_from_dmabuf (GstGLContext * context,
     gint dmabuf, const GstVideoInfo * in_info, gint plane, gsize offset)
+{
+  return gst_egl_image_from_dmabuf_with_modifier (context, dmabuf, in_info,
+      plane, offset, DRM_FORMAT_MOD_INVALID);
+}
+
+/**
+ * gst_egl_image_from_dmabuf_with_modifier:
+ * @context: a #GstGLContext (must be an EGL context)
+ * @dmabuf: the DMA-Buf file descriptor
+ * @in_info: the #GstVideoInfo in @dmabuf
+ * @plane: the plane in @in_info to create and #GstEGLImage for
+ * @offset: the byte-offset in the data
+ * @modifier: the underlying modifier value
+ *
+ * Similar to to gst_egl_image_from_dmabuf(), just the underlying modifier
+ * needs to be specified.
+ *
+ * Returns: (nullable): a #GstEGLImage wrapping @dmabuf or %NULL on failure
+ *
+ * Since: 1.24
+ */
+GstEGLImage *
+gst_egl_image_from_dmabuf_with_modifier (GstGLContext * context,
+    gint dmabuf, const GstVideoInfo * in_info,
+    gint plane, gsize offset, guint64 modifier)
 {
   gint comp[GST_VIDEO_MAX_COMPONENTS];
   GstGLFormat format = 0;
-  guintptr attribs[13];
+  guintptr attribs[17];
   EGLImageKHR img;
   gint atti = 0;
   gint fourcc;
@@ -672,8 +697,15 @@ gst_egl_image_from_dmabuf (GstGLContext * context,
   attribs[atti++] = offset;
   attribs[atti++] = EGL_DMA_BUF_PLANE0_PITCH_EXT;
   attribs[atti++] = get_egl_stride (in_info, plane);
+
+  if (modifier != DRM_FORMAT_MOD_INVALID) {
+    attribs[atti++] = EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT;
+    attribs[atti++] = modifier & 0xffffffff;
+    attribs[atti++] = EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT;
+    attribs[atti++] = (modifier >> 32) & 0xffffffff;
+  }
   attribs[atti] = EGL_NONE;
-  g_assert (atti == G_N_ELEMENTS (attribs) - 1);
+  g_assert (atti <= G_N_ELEMENTS (attribs) - 1);
 
   for (i = 0; i < atti; i++)
     GST_LOG ("attr %i: %" G_GINTPTR_FORMAT, i, attribs[i]);
@@ -934,7 +966,30 @@ gst_egl_image_from_dmabuf_direct_target (GstGLContext * context,
     gint * fd, const gsize * offset, const GstVideoInfo * in_info,
     GstGLTextureTarget target)
 {
+  return gst_egl_image_from_dmabuf_direct_target_with_modifier (context,
+      fd, offset, in_info, target, DRM_FORMAT_MOD_LINEAR);
+}
 
+/**
+ * gst_egl_image_from_dmabuf_direct_target:
+ * @context: a #GstGLContext (must be an EGL context)
+ * @fd: Array of DMABuf file descriptors
+ * @offset: Array of offsets, relative to the DMABuf
+ * @in_info: the #GstVideoInfo
+ * @target: GL texture target this GstEGLImage is intended for
+ *
+ * Similar to to gst_egl_image_from_dmabuf_direct_target(), just the
+ * underlying modifier needs to be specified.
+ *
+ * Returns: (nullable): a #GstEGLImage wrapping @dmabuf or %NULL on failure
+ *
+ * Since: 1.24
+ */
+GstEGLImage *
+gst_egl_image_from_dmabuf_direct_target_with_modifier (GstGLContext * context,
+    gint * fd, const gsize * offset, const GstVideoInfo * in_info,
+    GstGLTextureTarget target, guint64 modifier)
+{
   EGLImageKHR img;
   guint n_planes = GST_VIDEO_INFO_N_PLANES (in_info);
   gint fourcc;
@@ -978,9 +1033,9 @@ gst_egl_image_from_dmabuf_direct_target (GstGLContext * context,
     attribs[atti++] = get_egl_stride (in_info, 0);
     if (with_modifiers) {
       attribs[atti++] = EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT;
-      attribs[atti++] = DRM_FORMAT_MOD_LINEAR & 0xffffffff;
+      attribs[atti++] = modifier & 0xffffffff;
       attribs[atti++] = EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT;
-      attribs[atti++] = (DRM_FORMAT_MOD_LINEAR >> 32) & 0xffffffff;
+      attribs[atti++] = (modifier >> 32) & 0xffffffff;
     }
   }
 
@@ -994,9 +1049,9 @@ gst_egl_image_from_dmabuf_direct_target (GstGLContext * context,
     attribs[atti++] = get_egl_stride (in_info, 1);
     if (with_modifiers) {
       attribs[atti++] = EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT;
-      attribs[atti++] = DRM_FORMAT_MOD_LINEAR & 0xffffffff;
+      attribs[atti++] = modifier & 0xffffffff;
       attribs[atti++] = EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT;
-      attribs[atti++] = (DRM_FORMAT_MOD_LINEAR >> 32) & 0xffffffff;
+      attribs[atti++] = (modifier >> 32) & 0xffffffff;
     }
   }
 
@@ -1010,9 +1065,9 @@ gst_egl_image_from_dmabuf_direct_target (GstGLContext * context,
     attribs[atti++] = get_egl_stride (in_info, 2);
     if (with_modifiers) {
       attribs[atti++] = EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT;
-      attribs[atti++] = DRM_FORMAT_MOD_LINEAR & 0xffffffff;
+      attribs[atti++] = modifier & 0xffffffff;
       attribs[atti++] = EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT;
-      attribs[atti++] = (DRM_FORMAT_MOD_LINEAR >> 32) & 0xffffffff;
+      attribs[atti++] = (modifier >> 32) & 0xffffffff;
     }
   }
 
@@ -1171,4 +1226,72 @@ gst_egl_image_export_dmabuf (GstEGLImage * image, int *fd, gint * stride,
   return TRUE;
 }
 
+/**
+ * gst_egl_image_get_modifiers:
+ * @context: a #GstGLContext (must be an EGL context)
+ * @fourcc: the drm fourcc.
+ *
+ * Returns an array of list for all supported modifiers for the
+ * specified @fourcc, or NULL if no according modifiers.
+ *
+ * Returns: (transfer full) (nullable): An array of the supported
+ *   modifiers list.
+ *
+ * Since: 1.24
+ */
+GArray *
+gst_egl_image_get_modifiers (GstGLContext * context, guint32 fourcc)
+{
+  EGLDisplay egl_dpy = EGL_DEFAULT_DISPLAY;
+  GstGLDisplayEGL *gl_dpy_egl;
+  EGLuint64KHR *mods;
+  int num_mods = 0;
+  gboolean ret;
+  GArray *modifiers;
+
+  EGLBoolean (*gst_eglQueryDmaBufModifiersEXT) (EGLDisplay dpy,
+      EGLint format, EGLint max_modifiers, EGLuint64KHR * modifiers,
+      EGLBoolean * external_only, EGLint * num_modifiers);
+
+  if (!gst_gl_context_check_feature (context,
+          "EGL_EXT_image_dma_buf_import_modifiers"))
+    return NULL;
+
+  gst_eglQueryDmaBufModifiersEXT =
+      gst_gl_context_get_proc_address (context, "eglQueryDmaBufModifiersEXT");
+  if (!gst_eglQueryDmaBufModifiersEXT)
+    return NULL;
+
+  gl_dpy_egl = gst_gl_display_egl_from_gl_display (context->display);
+  if (!gl_dpy_egl) {
+    GST_WARNING_OBJECT (context,
+        "Failed to retrieve GstGLDisplayEGL from %" GST_PTR_FORMAT,
+        context->display);
+    return NULL;
+  }
+  egl_dpy =
+      (EGLDisplay) gst_gl_display_get_handle (GST_GL_DISPLAY (gl_dpy_egl));
+  gst_object_unref (gl_dpy_egl);
+
+  ret = gst_eglQueryDmaBufModifiersEXT (egl_dpy, fourcc, 0,
+      NULL, NULL, &num_mods);
+  if (!ret || num_mods == 0)
+    return NULL;
+
+  modifiers = g_array_new (FALSE, FALSE, sizeof (guint64));
+  g_array_set_size (modifiers, num_mods);
+
+  mods = (EGLuint64KHR *) modifiers->data;
+  ret = gst_eglQueryDmaBufModifiersEXT (egl_dpy, fourcc, num_mods,
+      mods, NULL, &num_mods);
+  if (!ret || num_mods == 0) {
+    g_array_unref (modifiers);
+    return NULL;
+  }
+
+  g_assert (num_mods <= modifiers->len);
+  g_array_set_size (modifiers, num_mods);
+
+  return modifiers;
+}
 #endif /* GST_GL_HAVE_DMABUF */
diff --git a/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.h b/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.h
index f90fa82a39..cb34e92d7b 100644
--- a/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.h
+++ b/subprojects/gst-plugins-base/gst-libs/gst/gl/egl/gsteglimage.h
@@ -89,6 +89,13 @@ GstEGLImage *           gst_egl_image_from_dmabuf               (GstGLContext *
                                                                  gint plane,
                                                                  gsize offset);
 GST_GL_API
+GstEGLImage *           gst_egl_image_from_dmabuf_with_modifier (GstGLContext * context,
+                                                                 gint dmabuf,
+                                                                 const GstVideoInfo * in_info,
+                                                                 gint plane,
+                                                                 gsize offset,
+                                                                 guint64 modifier);
+GST_GL_API
 GstEGLImage *           gst_egl_image_from_dmabuf_direct        (GstGLContext * context,
                                                                  gint *fd,
                                                                  const gsize *offset,
@@ -99,9 +106,18 @@ GstEGLImage *           gst_egl_image_from_dmabuf_direct_target (GstGLContext *
                                                                  const gsize *offset,
                                                                  const GstVideoInfo * in_info,
                                                                  GstGLTextureTarget target);
-
+GST_GL_API
+GstEGLImage *           gst_egl_image_from_dmabuf_direct_target_with_modifier (GstGLContext * context,
+                                                                               gint *fd,
+                                                                               const gsize *offset,
+                                                                               const GstVideoInfo * in_info,
+                                                                               GstGLTextureTarget target,
+                                                                               guint64 modifier);
 GST_GL_API
 gboolean                gst_egl_image_export_dmabuf             (GstEGLImage *image, int *fd, gint *stride, gsize *offset);
+GST_GL_API
+GArray *                gst_egl_image_get_modifiers             (GstGLContext * context,
+                                                                 guint32 fourcc);
 #endif
 
 /**
-- 
2.25.1

